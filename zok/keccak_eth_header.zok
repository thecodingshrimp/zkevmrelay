// taken from https://github.com/Zokrates/ZoKrates/blob/393896daa4c783e40d27e47e0986bd717585fd3c/zokrates_stdlib/stdlib/hashes/keccak/keccak.zok
// and modified for hashing a Ethereum block header

// https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf
// based on keccak-f[1600] permutation

const u32[24] RHO = [
    1,  3,  6,  10, 15, 21, 28, 36, 45, 55, 2,  14,
    27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44
]

const u32[24] PI = [
   10, 7,  11, 17, 18, 3, 5,  16, 8,  21, 24, 4,
   15, 23, 19, 13, 12, 2, 20, 14, 22, 9,  6,  1
]

const u64[24] RC = [
   0x0000000000000001, 0x0000000000008082, 0x800000000000808a,
   0x8000000080008000, 0x000000000000808b, 0x0000000080000001,
   0x8000000080008081, 0x8000000000008009, 0x000000000000008a,
   0x0000000000000088, 0x0000000080008009, 0x000000008000000a,
   0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
   0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
   0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
   0x8000000000008080, 0x0000000080000001, 0x8000000080008008
]

// left rotation
def rotl64(u64 x, u32 n) -> u64:
    return ((x << n) | (x >> (64 - n)))

// change endianness
def swap_u64(u64 val) -> u64:
    val = ((val << 8) & 0xFF00FF00FF00FF00) | ((val >> 8) & 0x00FF00FF00FF00FF)
    val = ((val << 16) & 0xFFFF0000FFFF0000) | ((val >> 16) & 0x0000FFFF0000FFFF)
    return (val << 32) | (val >> 32)

// compression function
def keccakf(u64[25] st) -> u64[25]:
    u64[5] bc = [0; 5]
    u64 t = 0

    for u32 r in 0..24 do
        // theta
        for u32 i in 0..5 do
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20]
        endfor

        for u32 i in 0..5 do
            t = bc[(i + 4) % 5] ^ rotl64(bc[(i + 1) % 5], 1)
            for u32 j in 0..5 do
                st[(j * 5) + i] = st[(j * 5) + i] ^ t
            endfor
        endfor

        t = st[1]

        // rho pi
        for u32 i in 0..24 do
            u32 j = PI[i]
            bc[0] = st[j]
            st[j] = rotl64(t, RHO[i])
            t = bc[0]
        endfor

        // chi
        for u32 i in 0..5 do
            for u32 j in 0..5 do
                bc[j] = st[(i * 5) + j]
            endfor
            for u32 j in 0..5 do
                u32 p = (i * 5) + j
                st[p] = st[p] ^ (!bc[(j + 1) % 5] & bc[(j + 2) % 5])
            endfor
        endfor

        // iota
        st[0] = st[0] ^ RC[r]
    endfor
    return st

def main(u64[71] input, u64 pad, u32 ls8b) -> u64[4]:
    u64[25] q = [0; 25]
    u32 rate = 17
    u32 pt = 0

    // change endianness of inputs from big endian to little endian
    for u32 i in 0..71 do
        input[i] = swap_u64(input[i])
    endfor

    // add padding if necessary
    u32 round = ls8b % rate
    input[ls8b - 1] = \
                if pad != 0x0000000000000001 && round == 0 then (input[ls8b - 1] ^ pad) ^ 0x8000000000000000 else \
                    if pad != 0x0000000000000001 then input[ls8b - 1] ^ pad else \
                        input[ls8b - 1] \
                    fi \
                fi
    
    // update
    for u32 i in 0..57 do
        q[pt] = q[pt] ^ input[i]
        pt = (pt + 1) % rate
        q = if pt == 0 then keccakf(q) else q fi
    endfor

    u64[25] q_2 = q
    u32 pt_2 = pt
    for u32 i in 57..71 do
        q_2[pt_2] = q_2[pt_2] ^ input[i]
        pt_2 = (pt_2 + 1) % rate
        q_2 = if pt_2 == 0 then keccakf(q_2) else q_2 fi
        q = if i < ls8b then q_2 else q fi
        pt = if i < ls8b then pt_2 else pt fi
    endfor

    // finalize
    q[pt] = pad == 0x0000000000000001 && round > 0 ? q[pt] ^ pad : q[pt]
    q[rate - 1] = round > 0 ? q[rate - 1] ^ 0x8000000000000000 : q[rate - 1]
    q = round > 0 ? keccakf(q) : q

    // change endianness of output from little endian to big endian
    for u32 i in 0..4 do
        q[i] = swap_u64(q[i])
    endfor

    return q[0..4]