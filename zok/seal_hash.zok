// CURRENT CONSTRAINTS: 877,365
import "./keccak_eth_header" as keccak
import "utils/casts/u64_to_bits" as u64_to_bits
import "utils/casts/u32_from_bits" as u32_from_bits
import "utils/casts/u32_to_bits" as u32_to_bits
import "utils/casts/u64_from_bits" as u64_from_bits
import "utils/casts/field_to_u64" as field_to_u64

// see SealHash function at https://github.com/ethereum/go-ethereum/blob/7ae6c4a79006ce27b19f144be09af8211c7055e5/consensus/ethash/consensus.go
// seal_hash returns the hash of a block prior to it being sealed.
def main(u64[71] rlp_header, u32 byte_length_with_rlp) -> (u64[4]):
    // actual length + 3 byte for rlp encoding of list - 42 bytes for mix digest and nonce at the end.
    bool[64] first_64_bits = u64_to_bits(rlp_header[0])
    u64[71] rlp_header_wo_digest_nonce = [u64_from_bits([...first_64_bits[0..8], ...u32_to_bits(byte_length_with_rlp - 45 - 3)[16..32], ...first_64_bits[24..64]]), ...rlp_header[1..71]]
    u32 position = byte_length_with_rlp / 8
    u32 rest = byte_length_with_rlp % 8
    position = if rest > 0 then position + 1 else position fi

    // can't use shifting here since shifting can only occur with static values
    u64 padding = \
                if rest == 1 then 0x0000000000000100 else \
                    if rest == 2 then 0x0000000000010000 else \
                        if rest == 3 then 0x0000000001000000 else \
                            if rest == 4 then 0x0000000100000000 else \
                                if rest == 5 then 0x0000010000000000 else \
                                    if rest == 6 then 0x0001000000000000 else \
                                        if rest == 7 then 0x0100000000000000 else \
                                            0x0000000000000001 \
                                        fi\
                                    fi\
                                fi\
                            fi\
                        fi\
                    fi\
                fi

    u32 last_position = position - 1
    rlp_header_wo_digest_nonce[last_position] = \
                if rest == 1 then rlp_header_wo_digest_nonce[last_position] & 0xff00000000000000 else \
                    if rest == 2 then rlp_header_wo_digest_nonce[last_position] & 0xffff000000000000 else \
                        if rest == 3 then rlp_header_wo_digest_nonce[last_position] & 0xffffff0000000000 else \
                            if rest == 4 then rlp_header_wo_digest_nonce[last_position] & 0xffffffff00000000 else \
                                if rest == 5 then rlp_header_wo_digest_nonce[last_position] & 0xffffffffff000000 else \
                                    if rest == 6 then rlp_header_wo_digest_nonce[last_position] & 0xffffffffffff0000 else \
                                        if rest == 7 then rlp_header_wo_digest_nonce[last_position] & 0xffffffffffffff00 else \
                                            rlp_header_wo_digest_nonce[last_position] \
                                        fi\
                                    fi\
                                fi\
                            fi\
                        fi\
                    fi\
                fi

    // TODO PROBLEM MIT ZOKRATES DASS ES SEHR GROSS WIRD, WENN MAN VARIABLE LENGTH FUER KECCAK HASH MACHT.
    // VLLT LOESUNG: RLP HEADER IM CONTRACT HASHEN UND DANN MIT DEM 71*8BYTE HEADER HASH (0 BYTES PADDED) VOM ZOKRATES PROGRAMM ABGLEICHEN
    u64[4] hash = keccak(rlp_header_wo_digest_nonce, padding, position)
    return hash
    