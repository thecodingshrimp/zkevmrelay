import "hashes/poseidon/poseidon.zok" as poseidon
import "utils/casts/u32_to_field.zok" as u32_to_field
import "utils/pack/u32/pack256.zok" as u32_pack256

const u32[2][8] merkle_roots = [
    [0,0,0,0,0,0,0,0],
    [739193817, 486250219, 1943314683, 2098445413, 2204553094, 2343564423, 1101274513, 268358908]
]

// returns correct child order of a merkle tree node given the traversal bit of the first value
def get_child_order(u32 bit, field[3] children) -> field[3]:
    return bit == 0 ? children : [children[1], children[2], children[0]]

// todo pack u32 values correctly into 254bit fields; see u64_to_field_block_hash in batch_mt_root_generator_poseidon
def u32_to_field_proof(u32[24][8] proof) -> field[24][2]:
    // need two fields, cause ALT_BN_128 only support 254bit fields
    field[24][2] proof_field = [[0, 0]; 24]
    
    for u32 i in 0..24 do
        proof_field[i][0] = u32_to_field(proof[i][0])
        proof_field[i][1] = u32_pack256([0, ...proof[i][1..8]])
    endfor

    return proof_field

// todo pack u32 values correctly into 254bit fields; see u64_to_field_block_hash in batch_mt_root_generator_poseidon
def u32_to_field_value(u32[32] value) -> field[5]:
    field[5] value_field = [0; 5]

    value_field[0] = u32_pack256([...[0; 4], ...value[0..4]])
    for u32 i in 0..4 do
        value_field[i + 1] = u32_pack256([0, ...value[((i * 7) + 4)..((i * 7) + 11)]])
    endfor

    return value_field

// Note: value LE; index, merkle root and proof BE
def main(u32[32] value, u32 index, u32 epoch, u32[24][8] proof) -> bool:
    assert(index % 2 == 0)
    // change inputs to field elements
    field[24][2] proof_field = u32_to_field_proof(proof)
    field[5] value_field = u32_to_field_value(value)

    u32 hashIndex = index / 2
    field hash = poseidon(value_field)
    u32 curr_bit = 0
    field[3] curr_children = [0; 3]
    for u32 i in 0..24 do
        curr_bit = hashIndex >> i & 1
        curr_children = get_child_order(curr_bit, [hash, ...proof_field[23-i]])
        hash = poseidon(curr_children)
    endfor
    // assert(hash == merkle_roots[epoch])
    return true